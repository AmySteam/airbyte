"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[4173],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||s;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},80348:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const s={},o="Substreams",i={unversionedId:"connector-development/config-based/substreams",id:"connector-development/config-based/substreams",title:"Substreams",description:"Substreams are streams that depend on the records on another stream",source:"@site/../docs/connector-development/config-based/substreams.md",sourceDirName:"connector-development/config-based",slug:"/connector-development/config-based/substreams",permalink:"/connector-development/config-based/substreams",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/config-based/substreams.md",tags:[],version:"current",frontMatter:{}},c={},l=[{value:"Substream slicer",id:"substream-slicer",level:2}],p={toc:l};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"substreams"},"Substreams"),(0,a.kt)("p",null,"Substreams are streams that depend on the records on another stream"),(0,a.kt)("p",null,"We might for instance want to read all the commits for a given repository (parent stream)."),(0,a.kt)("h2",{id:"substream-slicer"},"Substream slicer"),(0,a.kt)("p",null,"Substreams are implemented by defining their stream slicer as a",(0,a.kt)("inlineCode",{parentName:"p"},"SubstreamSlicer"),"."),(0,a.kt)("p",null,"For each stream, the slicer needs to know"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"what the parent stream is"),(0,a.kt)("li",{parentName:"ul"},"what is the key of the records in the parent stream"),(0,a.kt)("li",{parentName:"ul"},"what is the field defining the stream slice representing the parent record"),(0,a.kt)("li",{parentName:"ul"},"how to specify that information on an outgoing HTTP request")),(0,a.kt)("p",null,"Assuming the commits for a given repository can be read by specifying the repository as a request_parameter, this could be defined as"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'stream_slicer:\n  type: "SubstreamSlicer"\n  parent_streams_configs:\n    - stream: "*ref(repositories_stream)"\n      parent_key: "id"\n      stream_slice_field: "repository"\n      request_option:\n        field_name: "repository"\n        inject_into: "request_parameter"\n')),(0,a.kt)("p",null,'REST APIs often nest sub-resources in the URL path.\nIf the URL to fetch commits was "/repositories/:id/commits", then the ',(0,a.kt)("inlineCode",{parentName:"p"},"Requester"),"'s path would need to refer to the stream slice's value and no ",(0,a.kt)("inlineCode",{parentName:"p"},"request_option")," would be set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'retriever:\n  <...>\n  requester:\n    <...>\n    path: "/respositories/{{ stream_slice.repository }}/commits\n  stream_slicer:\n    type: "SubstreamSlicer"\n    parent_streams_configs:\n      - stream: "*ref(repositories_stream)"\n        parent_key: "id"\n        stream_slice_field: "repository"\n')))}m.isMDXComponent=!0}}]);